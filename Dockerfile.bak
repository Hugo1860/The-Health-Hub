# syntax=docker/dockerfile:1
# 如果遇到网络问题，可以注释掉上面的 syntax 行

FROM node:20-alpine AS deps
WORKDIR /app
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./
RUN if [ -f package-lock.json ]; then npm ci --omit=dev --no-audit --no-fund; \
    elif [ -f pnpm-lock.yaml ]; then npm -g i pnpm && pnpm i --frozen-lockfile --prod; \
    elif [ -f yarn.lock ]; then yarn --frozen-lockfile --production=true; \
    else npm i --omit=dev --no-audit --no-fund; fi

# 1) Builder stage
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
ENV NODE_ENV=production
RUN npm run build

# 2) Runner stage (standalone)
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# System runtime deps and init
RUN apk add --no-cache libc6-compat curl tini

# Create non-root user
RUN addgroup -g 1001 nodejs && adduser -D -u 1001 nextjs
USER 1001

# Copy only standalone output
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

EXPOSE 3000
ENTRYPOINT ["/sbin/tini","--"]
CMD ["node", "server.js"]


